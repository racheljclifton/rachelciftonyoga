{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/Documents/rachelcliftonyoga/src/store/deck-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeckContext = /*#__PURE__*/React.createContext({\n  deck: [],\n  selectedCard: {},\n  onCreate: () => {},\n  onFilter: filterCategory => {},\n  onShuffle: numberOfShuffles => {},\n  onSelect: drawSelection => {}\n});\nexport default DeckContext;\nexport const DeckContextProvider = props => {\n  _s();\n\n  const [deck, setDeck] = useState([]);\n  const [selectedCard, setSelectedCard] = useState({});\n\n  const filterDeckHandler = filterCategory => {\n    setDeck(prevDeck => {\n      const filteredDeck = prevDeck.filter(card => card.category === filterCategory);\n      return filteredDeck;\n    });\n  };\n\n  function shuffleDeck(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  const shuffleDeckHandler = numberOfShuffles => {\n    const shuffledDeck = deck.slice(0);\n\n    for (let i = 0; i < numberOfShuffles; i++) {\n      shuffleDeck(shuffledDeck);\n    }\n\n    setDeck(shuffledDeck);\n  };\n\n  const selectCardHandler = drawSelection => {\n    if (drawSelection === \"top\") {\n      setSelectedCard(deck[0]);\n    } else if (drawSelection === \"bottom\") {\n      setSelectedCard(deck[deck.length - 1]);\n    } else {\n      const random = Math.floor(Math.random() * deck.length);\n      setSelectedCard(deck[random]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(DeckContext.Provider, {\n    value: {\n      deck: deck,\n      selectedCard: selectedCard,\n      onCreate: setDeck,\n      onFilter: filterDeckHandler,\n      onShuffle: shuffleDeckHandler,\n      onSelect: selectCardHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DeckContextProvider, \"nGr6dC4WvtGWYh0Z5O07Apv2Bng=\");\n\n_c = DeckContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckContextProvider\");","map":{"version":3,"sources":["/Users/rachel/Documents/rachelcliftonyoga/src/store/deck-context.js"],"names":["React","useState","DeckContext","createContext","deck","selectedCard","onCreate","onFilter","filterCategory","onShuffle","numberOfShuffles","onSelect","drawSelection","DeckContextProvider","props","setDeck","setSelectedCard","filterDeckHandler","prevDeck","filteredDeck","filter","card","category","shuffleDeck","array","i","length","j","Math","floor","random","shuffleDeckHandler","shuffledDeck","slice","selectCardHandler","children"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst DeckContext = React.createContext({\n  deck: [],\n  selectedCard: {},\n  onCreate: () => {},\n  onFilter: (filterCategory) => {},\n  onShuffle: (numberOfShuffles) => {},\n  onSelect: (drawSelection) => {}\n});\n\nexport default DeckContext;\n\nexport const DeckContextProvider = (props) => {\n  const [deck, setDeck] = useState([]);\n  const [selectedCard, setSelectedCard] = useState({});\n\n  const filterDeckHandler = (filterCategory) => {\n    setDeck((prevDeck) => {\n        const filteredDeck = prevDeck.filter((card) => card.category === filterCategory)\n      return filteredDeck;\n    });\n  };\n\n  function shuffleDeck(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  const shuffleDeckHandler = (numberOfShuffles) => {\n    const shuffledDeck = deck.slice(0);\n    for (let i = 0; i < numberOfShuffles; i++) {\n      shuffleDeck(shuffledDeck);\n    }\n    setDeck(shuffledDeck);\n  };\n\n  const selectCardHandler = (drawSelection) => {\n    if (drawSelection === \"top\") {\n      setSelectedCard(deck[0]);\n    } else if (drawSelection === \"bottom\") {\n      setSelectedCard(deck[deck.length - 1]);\n    } else {\n      const random = Math.floor(Math.random() * deck.length);\n      setSelectedCard(deck[random]);\n    }\n  };\n\n  return (\n    <DeckContext.Provider\n      value={{\n        deck: deck,\n        selectedCard: selectedCard,\n        onCreate: setDeck,\n        onFilter: filterDeckHandler,\n        onShuffle: shuffleDeckHandler,\n        onSelect: selectCardHandler,\n      }}\n    >\n      {props.children}\n    </DeckContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}