{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/Documents/rachelcliftonyoga/src/Components/AffirmationDeck/AffirmationDeck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AffirmationDeck = () => {\n  _s();\n\n  const [deck, setDeck] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchDeck = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://rachel-clifton-yoga-default-rtdb.firebaseio.com/affirmation-deck.jso\");\n\n      if (!response.ok) {\n        throw new Error(\"Sorry! There was an issue accessing the Virtual Affirmation Deck.\");\n      }\n\n      const data = await response.json();\n      const transformedDeck = [];\n\n      for (const key in data) {\n        transformedDeck.push({\n          id: key,\n          affirmation: data[key].affirmation,\n          mantra: data[key].mantra,\n          category: data[key].category\n        });\n      }\n\n      setDeck(transformedDeck);\n    } catch (newError) {\n      setError(newError.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => fetchDeck(), [fetchDeck]);\n  let content;\n\n  if (deck.length > 0) {\n    console.log('deck');\n    content = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: deck.map(card => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: card.id\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false);\n  }\n\n  if (error) {\n    console.log(error);\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (isLoading) {\n    console.log('loading');\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Virtual Affirmation Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true);\n};\n\n_s(AffirmationDeck, \"MNLWQx2oh1JIAGQCUkOw/X9K9zE=\");\n\n_c = AffirmationDeck;\nexport default AffirmationDeck;\n\nvar _c;\n\n$RefreshReg$(_c, \"AffirmationDeck\");","map":{"version":3,"sources":["/Users/rachel/Documents/rachelcliftonyoga/src/Components/AffirmationDeck/AffirmationDeck.js"],"names":["React","useEffect","useState","useCallback","AffirmationDeck","deck","setDeck","isLoading","setIsLoading","error","setError","fetchDeck","response","fetch","ok","Error","data","json","transformedDeck","key","push","id","affirmation","mantra","category","newError","message","content","length","console","log","map","card"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMS,SAAS,GAAGR,WAAW,CAAC,YAAY;AACxCK,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8EAD0B,CAA5B;;AAGA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CACJ,mEADI,CAAN;AAGD;;AACD,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,YAAMC,eAAe,GAAG,EAAxB;;AACA,WAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACtBE,QAAAA,eAAe,CAACE,IAAhB,CAAqB;AACnBC,UAAAA,EAAE,EAAEF,GADe;AAEnBG,UAAAA,WAAW,EAAEN,IAAI,CAACG,GAAD,CAAJ,CAAUG,WAFJ;AAGnBC,UAAAA,MAAM,EAAEP,IAAI,CAACG,GAAD,CAAJ,CAAUI,MAHC;AAInBC,UAAAA,QAAQ,EAAER,IAAI,CAACG,GAAD,CAAJ,CAAUK;AAJD,SAArB;AAMD;;AACDlB,MAAAA,OAAO,CAACY,eAAD,CAAP;AACD,KArBD,CAqBE,OAAOO,QAAP,EAAiB;AACjBf,MAAAA,QAAQ,CAACe,QAAQ,CAACC,OAAV,CAAR;AACD;;AACDlB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GA5B4B,EA4B1B,EA5B0B,CAA7B;AA8BAP,EAAAA,SAAS,CAAC,MAAMU,SAAS,EAAhB,EAAoB,CAACA,SAAD,CAApB,CAAT;AAEA,MAAIgB,OAAJ;;AAEA,MAAGtB,IAAI,CAACuB,MAAL,GAAc,CAAjB,EAAoB;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAH,IAAAA,OAAO,gBACL;AAAA,gBACGtB,IAAI,CAAC0B,GAAL,CAAUC,IAAD,iBACR;AAAA,kBAAkBA,IAAI,CAACX;AAAvB,SAAQW,IAAI,CAACX,EAAb;AAAA;AAAA;AAAA;AAAA,cADD;AADH,qBADF;AAOD;;AACD,MAAIZ,KAAJ,EAAW;AACToB,IAAAA,OAAO,CAACC,GAAR,CAAYrB,KAAZ;AACAkB,IAAAA,OAAO,gBAAG;AAAA,gBAAIlB;AAAJ;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AACD,MAAIF,SAAJ,EAAe;AACbsB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAH,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGA,OAFH;AAAA,kBADF;AAMD,CAhED;;GAAMvB,e;;KAAAA,e;AAkEN,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\n\nconst AffirmationDeck = () => {\n  const [deck, setDeck] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchDeck = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://rachel-clifton-yoga-default-rtdb.firebaseio.com/affirmation-deck.jso\"\n      );\n      if (!response.ok) {\n        throw new Error(\n          \"Sorry! There was an issue accessing the Virtual Affirmation Deck.\"\n        );\n      }\n      const data = await response.json();\n\n      const transformedDeck = [];\n      for (const key in data) {\n        transformedDeck.push({\n          id: key,\n          affirmation: data[key].affirmation,\n          mantra: data[key].mantra,\n          category: data[key].category,\n        });\n      }\n      setDeck(transformedDeck);\n    } catch (newError) {\n      setError(newError.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => fetchDeck(), [fetchDeck]);\n\n  let content;\n\n  if(deck.length > 0) {\n    console.log('deck')\n    content = (\n      <>\n        {deck.map((card) => (\n          <p key={card.id}>{card.id}</p>\n        ))}\n      </>\n    );\n  }\n  if (error) {\n    console.log(error)\n    content = <p>{error}</p>;\n  }\n  if (isLoading) {\n    console.log('loading')\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <>\n      <h1>Virtual Affirmation Deck</h1>\n      {content}\n    </>\n  );\n};\n\nexport default AffirmationDeck;\n"]},"metadata":{},"sourceType":"module"}