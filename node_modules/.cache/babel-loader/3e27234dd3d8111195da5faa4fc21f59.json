{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/Documents/rachelcliftonyoga/src/Components/AffirmationDeck/AffirmationDeck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback, useContext } from \"react\";\nimport AffirmationDeckCard from \"./AffirmationCard\";\nimport AffirmationDeckForm from \"./AffirmationDeckForm/AffirmationDeckForm\";\nimport DeckContext from \"../../store/deck-context\";\nimport styles from \"./AffirmationDeck.module.css\";\nimport logo from \"../../../src/logo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AffirmationDeck = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [display, setDisplay] = useState(\"form\");\n  const ctx = useContext(DeckContext);\n  const onCreate = ctx.onCreate;\n\n  const delay = n => new Promise(r => setTimeout(r, n * 1000));\n\n  const fetchDeck = useCallback(async () => {\n    // console.log(\"fetching deck\");\n    setIsLoading(true);\n    setError(null);\n    await delay(0.3);\n\n    try {\n      const response = await fetch(\"https://rachel-clifton-yoga-default-rtdb.firebaseio.com/affirmation-deck.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Sorry! There was an issue accessing the Virtual Affirmation Deck.\");\n      }\n\n      const data = await response.json();\n      const transformedDeck = [];\n\n      for (const key in data) {\n        transformedDeck.push({\n          id: key,\n          affirmation: data[key].affirmation,\n          mantra: data[key].mantra,\n          category: data[key].category\n        });\n      }\n\n      onCreate(transformedDeck);\n    } catch (newError) {\n      setError(newError.message);\n    }\n\n    setIsLoading(false);\n  }, [onCreate]);\n  useEffect(() => {\n    if (display === \"form\") {\n      fetchDeck();\n    }\n  }, [fetchDeck, display]);\n  let displayContent;\n\n  if (display === \"form\") {\n    displayContent = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: styles.loading,\n        src: logo,\n        alt: \"Spinning lotus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 23\n      }, this), !isLoading && /*#__PURE__*/_jsxDEV(AffirmationDeckForm, {\n        onDraw: setDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true);\n  }\n\n  if (display === \"card\") {\n    displayContent = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(AffirmationDeckCard, {\n        onBackToDeck: setDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  let content;\n\n  if (ctx.deck.length > 0) {\n    content = displayContent;\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }, this);\n  } // if (isLoading) {\n  //   content = (\n  //     <>\n  //       <img className={styles.loading} src={logo} alt=\"Spinning lotus\" />\n  //     </>\n  //   );\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [display === 'form' && /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: \"Virtual Affirmation Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 26\n    }, this), content]\n  }, void 0, true);\n};\n\n_s(AffirmationDeck, \"KlwSJhAoTiMSQv58uQKcTEDaIIA=\");\n\n_c = AffirmationDeck;\nexport default AffirmationDeck;\n\nvar _c;\n\n$RefreshReg$(_c, \"AffirmationDeck\");","map":{"version":3,"sources":["/Users/rachel/Documents/rachelcliftonyoga/src/Components/AffirmationDeck/AffirmationDeck.js"],"names":["React","useEffect","useState","useCallback","useContext","AffirmationDeckCard","AffirmationDeckForm","DeckContext","styles","AffirmationDeck","isLoading","setIsLoading","error","setError","display","setDisplay","ctx","onCreate","delay","n","Promise","r","setTimeout","fetchDeck","response","fetch","ok","Error","data","json","transformedDeck","key","push","id","affirmation","mantra","category","newError","message","displayContent","loading","logo","content","deck","length","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback, useContext } from \"react\";\nimport AffirmationDeckCard from \"./AffirmationCard\";\nimport AffirmationDeckForm from \"./AffirmationDeckForm/AffirmationDeckForm\";\nimport DeckContext from \"../../store/deck-context\";\n\nimport styles from \"./AffirmationDeck.module.css\";\nimport logo from \"../../../src/logo.svg\";\n\nconst AffirmationDeck = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [display, setDisplay] = useState(\"form\");\n\n  const ctx = useContext(DeckContext);\n  const onCreate = ctx.onCreate;\n\n  const delay = (n) => new Promise((r) => setTimeout(r, n * 1000));\n\n  const fetchDeck = useCallback(async () => {\n    // console.log(\"fetching deck\");\n    setIsLoading(true);\n    setError(null);\n    await delay(0.3);\n    try {\n      const response = await fetch(\n        \"https://rachel-clifton-yoga-default-rtdb.firebaseio.com/affirmation-deck.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\n          \"Sorry! There was an issue accessing the Virtual Affirmation Deck.\"\n        );\n      }\n      const data = await response.json();\n\n      const transformedDeck = [];\n      for (const key in data) {\n        transformedDeck.push({\n          id: key,\n          affirmation: data[key].affirmation,\n          mantra: data[key].mantra,\n          category: data[key].category,\n        });\n      }\n      onCreate(transformedDeck);\n    } catch (newError) {\n      setError(newError.message);\n    }\n    setIsLoading(false);\n  }, [onCreate]);\n\n  useEffect(() => {\n    if (display === \"form\") {\n      fetchDeck();\n    }\n  }, [fetchDeck, display]);\n\n  let displayContent;\n  if (display === \"form\") {\n    displayContent = (\n      <>\n\n        {isLoading && <img className={styles.loading} src={logo} alt=\"Spinning lotus\" />}\n        {!isLoading && <AffirmationDeckForm onDraw={setDisplay} />}\n      </>\n    );\n  }\n  if (display === \"card\") {\n    displayContent = (\n      <>\n        <AffirmationDeckCard onBackToDeck={setDisplay} />\n      </>\n    );\n  }\n\n  let content;\n\n  if (ctx.deck.length > 0) {\n    content = displayContent;\n  }\n  if (error) {\n    content = <p>{error}</p>;\n  }\n  // if (isLoading) {\n  //   content = (\n  //     <>\n  //       <img className={styles.loading} src={logo} alt=\"Spinning lotus\" />\n  //     </>\n  //   );\n  // }\n\n  return <>\n  {display === 'form' && <h1 className={styles.title}>Virtual Affirmation Deck</h1>}\n  {content}</>;\n};\n\nexport default AffirmationDeck;\n"]},"metadata":{},"sourceType":"module"}