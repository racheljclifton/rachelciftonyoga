{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/Documents/rachelcliftonyoga/src/Components/AffirmationDeck/AffirmationDeck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback, useContext } from \"react\";\nimport AffirmationDeckCard from \"./AffirmationCard\";\nimport AffirmationDeckForm from \"./AffirmationDeckForm/AffirmationDeckForm\";\nimport DeckContext from '../../store/deck-context';\nimport styles from './AffirmationDeck.module.css';\nimport logo from \"../../../src/logo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AffirmationDeck = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [display, setDisplay] = useState(\"form\");\n  const ctx = useContext(DeckContext);\n  const onCreate = ctx.onCreate;\n  const fetchDeck = useCallback(async () => {\n    console.log(\"fetching deck\");\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://rachel-clifton-yoga-default-rtdb.firebaseio.com/affirmation-deck.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Sorry! There was an issue accessing the Virtual Affirmation Deck.\");\n      }\n\n      const data = await response.json();\n      const transformedDeck = [];\n\n      for (const key in data) {\n        transformedDeck.push({\n          id: key,\n          affirmation: data[key].affirmation,\n          mantra: data[key].mantra,\n          category: data[key].category\n        });\n      }\n\n      onCreate(transformedDeck);\n    } catch (newError) {\n      setError(newError.message);\n    }\n\n    setTimeout(setIsLoading(false), 1000);\n  }, [onCreate]);\n  useEffect(() => {\n    if (display === 'form') {\n      fetchDeck();\n    }\n  }, [fetchDeck, display]);\n  let displayContent;\n\n  if (display === \"form\") {\n    displayContent = /*#__PURE__*/_jsxDEV(AffirmationDeckForm, {\n      onDraw: setDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 22\n    }, this);\n  }\n\n  if (display === \"card\") {\n    displayContent = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(AffirmationDeckCard, {\n        onBackToDeck: setDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  let content;\n\n  if (ctx.deck.length > 0) {\n    content = displayContent;\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: styles.loading,\n        src: logo,\n        alt: \"Spinning lotus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Virtual Affirmation Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true);\n};\n\n_s(AffirmationDeck, \"KlwSJhAoTiMSQv58uQKcTEDaIIA=\");\n\n_c = AffirmationDeck;\nexport default AffirmationDeck;\n\nvar _c;\n\n$RefreshReg$(_c, \"AffirmationDeck\");","map":{"version":3,"sources":["/Users/rachel/Documents/rachelcliftonyoga/src/Components/AffirmationDeck/AffirmationDeck.js"],"names":["React","useEffect","useState","useCallback","useContext","AffirmationDeckCard","AffirmationDeckForm","DeckContext","styles","AffirmationDeck","isLoading","setIsLoading","error","setError","display","setDisplay","ctx","onCreate","fetchDeck","console","log","response","fetch","ok","Error","data","json","transformedDeck","key","push","id","affirmation","mantra","category","newError","message","setTimeout","displayContent","content","deck","length","loading","logo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback, useContext } from \"react\";\nimport AffirmationDeckCard from \"./AffirmationCard\";\nimport AffirmationDeckForm from \"./AffirmationDeckForm/AffirmationDeckForm\";\nimport DeckContext from '../../store/deck-context';\n\nimport styles from './AffirmationDeck.module.css';\nimport logo from '../../../src/logo.svg'; \n\nconst AffirmationDeck = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [display, setDisplay] = useState(\"form\");\n\n  const ctx = useContext(DeckContext);\n  const onCreate = ctx.onCreate;\n\n  const fetchDeck = useCallback(async () => {\n    console.log(\"fetching deck\");\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://rachel-clifton-yoga-default-rtdb.firebaseio.com/affirmation-deck.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\n          \"Sorry! There was an issue accessing the Virtual Affirmation Deck.\"\n        );\n      }\n      const data = await response.json();\n\n      const transformedDeck = [];\n      for (const key in data) {\n        transformedDeck.push({\n          id: key,\n          affirmation: data[key].affirmation,\n          mantra: data[key].mantra,\n          category: data[key].category,\n        });\n      }\n      onCreate(transformedDeck);\n    } catch (newError) {\n      setError(newError.message);\n    }\n    setTimeout(setIsLoading(false),1000);\n  }, [onCreate]);\n\n  useEffect(() => {\n    if (display === 'form'){fetchDeck()}}, [fetchDeck, display]);\n\n  let displayContent;\n  if (display === \"form\") {\n    displayContent = <AffirmationDeckForm onDraw={setDisplay} />;\n  }\n  if (display === \"card\") {\n    displayContent = (\n      <>\n        <AffirmationDeckCard onBackToDeck={setDisplay} />\n      </>\n    );\n  }\n\n  let content;\n\n  if (ctx.deck.length > 0) {\n    content = displayContent;\n  }\n  if (error) {\n    content = <p>{error}</p>;\n  }\n  if (isLoading) {\n    content = <><img className={styles.loading} src={logo} alt=\"Spinning lotus\"/></>;\n  }\n\n  return (\n    <>\n      <h1>Virtual Affirmation Deck</h1>\n      {content}\n    </>\n  );\n};\n\nexport default AffirmationDeck;\n"]},"metadata":{},"sourceType":"module"}