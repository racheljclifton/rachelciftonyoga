{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/Documents/rachelcliftonyoga/src/Components/AffirmationDeck/AffirmationDeck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport AffirmationDeckCard from \"./AffirmationCard\";\nimport AffirmationDeckForm from \"./AffirmationDeckForm/AffirmationDeckForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AffirmationDeck = () => {\n  _s();\n\n  const [deck, setDeck] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [display, setDisplay] = useState(\"form\");\n  const [selectedCard, setSelectedCard] = useState({});\n  const fetchDeck = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://rachel-clifton-yoga-default-rtdb.firebaseio.com/affirmation-deck.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Sorry! There was an issue accessing the Virtual Affirmation Deck.\");\n      }\n\n      const data = await response.json();\n      const transformedDeck = [];\n\n      for (const key in data) {\n        transformedDeck.push({\n          id: key,\n          affirmation: data[key].affirmation,\n          mantra: data[key].mantra,\n          category: data[key].category\n        });\n      }\n\n      setDeck(transformedDeck);\n    } catch (newError) {\n      setError(newError.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => fetchDeck(), [fetchDeck]);\n  const onDraw = {\n    setDisplay,\n    setSelectedCard\n  };\n  let displayContent;\n\n  if (display === \"form\") {\n    displayContent = /*#__PURE__*/_jsxDEV(AffirmationDeckForm, {\n      onDraw: onDraw,\n      deck: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 22\n    }, this);\n  }\n\n  if (display === \"card\") {\n    displayContent = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(AffirmationDeckCard, {\n        card: selectedCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  let content;\n  useEffect(() => {\n    if (deck.length > 0) {\n      console.log(\"deck\");\n      content = displayContent;\n    }\n\n    if (error) {\n      console.log(error);\n      content = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (isLoading) {\n      console.log(\"loading\");\n      content = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this);\n    }\n  }, [deck, error, isLoading]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Virtual Affirmation Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true);\n};\n\n_s(AffirmationDeck, \"mSGKKDBfbJf5MSX+pQ5Uty7XnRA=\");\n\n_c = AffirmationDeck;\nexport default AffirmationDeck;\n\nvar _c;\n\n$RefreshReg$(_c, \"AffirmationDeck\");","map":{"version":3,"sources":["/Users/rachel/Documents/rachelcliftonyoga/src/Components/AffirmationDeck/AffirmationDeck.js"],"names":["React","useEffect","useState","useCallback","AffirmationDeckCard","AffirmationDeckForm","AffirmationDeck","deck","setDeck","isLoading","setIsLoading","error","setError","display","setDisplay","selectedCard","setSelectedCard","fetchDeck","response","fetch","ok","Error","data","json","transformedDeck","key","push","id","affirmation","mantra","category","newError","message","onDraw","displayContent","content","length","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,mBAAP,MAAgC,mBAAhC;AACA,OAAOC,mBAAP,MAAgC,2CAAhC;;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,MAAD,CAAtC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMe,SAAS,GAAGd,WAAW,CAAC,YAAY;AACxCO,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAC1B,+EAD0B,CAA5B;;AAGA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CACJ,mEADI,CAAN;AAGD;;AACD,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,YAAMC,eAAe,GAAG,EAAxB;;AACA,WAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACtBE,QAAAA,eAAe,CAACE,IAAhB,CAAqB;AACnBC,UAAAA,EAAE,EAAEF,GADe;AAEnBG,UAAAA,WAAW,EAAEN,IAAI,CAACG,GAAD,CAAJ,CAAUG,WAFJ;AAGnBC,UAAAA,MAAM,EAAEP,IAAI,CAACG,GAAD,CAAJ,CAAUI,MAHC;AAInBC,UAAAA,QAAQ,EAAER,IAAI,CAACG,GAAD,CAAJ,CAAUK;AAJD,SAArB;AAMD;;AACDtB,MAAAA,OAAO,CAACgB,eAAD,CAAP;AACD,KArBD,CAqBE,OAAOO,QAAP,EAAiB;AACjBnB,MAAAA,QAAQ,CAACmB,QAAQ,CAACC,OAAV,CAAR;AACD;;AACDtB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GA5B4B,EA4B1B,EA5B0B,CAA7B;AA8BAT,EAAAA,SAAS,CAAC,MAAMgB,SAAS,EAAhB,EAAoB,CAACA,SAAD,CAApB,CAAT;AAEA,QAAMgB,MAAM,GAAG;AACbnB,IAAAA,UADa;AAEbE,IAAAA;AAFa,GAAf;AAKA,MAAIkB,cAAJ;;AACA,MAAIrB,OAAO,KAAK,MAAhB,EAAwB;AACtBqB,IAAAA,cAAc,gBAAG,QAAC,mBAAD;AAAqB,MAAA,MAAM,EAAED,MAA7B;AAAqC,MAAA,IAAI,EAAE1B;AAA3C;AAAA;AAAA;AAAA;AAAA,YAAjB;AACD;;AACD,MAAIM,OAAO,KAAK,MAAhB,EAAwB;AACtBqB,IAAAA,cAAc,gBACZ;AAAA,6BACE,QAAC,mBAAD;AAAqB,QAAA,IAAI,EAAEnB;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAKD;;AAED,MAAIoB,OAAJ;AACAlC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,IAAI,CAAC6B,MAAL,GAAc,CAAlB,EAAqB;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAH,MAAAA,OAAO,GAAGD,cAAV;AACD;;AACD,QAAIvB,KAAJ,EAAW;AACT0B,MAAAA,OAAO,CAACC,GAAR,CAAY3B,KAAZ;AACAwB,MAAAA,OAAO,gBAAG;AAAA,kBAAIxB;AAAJ;AAAA;AAAA;AAAA;AAAA,cAAV;AACD;;AACD,QAAIF,SAAJ,EAAe;AACb4B,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAH,MAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAV;AACD;AACF,GAbQ,EAaN,CAAC5B,IAAD,EAAOI,KAAP,EAAcF,SAAd,CAbM,CAAT;AAeA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEG0B,OAFH;AAAA,kBADF;AAMD,CA9ED;;GAAM7B,e;;KAAAA,e;AAgFN,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport AffirmationDeckCard from \"./AffirmationCard\";\nimport AffirmationDeckForm from \"./AffirmationDeckForm/AffirmationDeckForm\";\n\nconst AffirmationDeck = () => {\n  const [deck, setDeck] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [display, setDisplay] = useState(\"form\");\n  const [selectedCard, setSelectedCard] = useState({});\n\n  const fetchDeck = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://rachel-clifton-yoga-default-rtdb.firebaseio.com/affirmation-deck.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\n          \"Sorry! There was an issue accessing the Virtual Affirmation Deck.\"\n        );\n      }\n      const data = await response.json();\n\n      const transformedDeck = [];\n      for (const key in data) {\n        transformedDeck.push({\n          id: key,\n          affirmation: data[key].affirmation,\n          mantra: data[key].mantra,\n          category: data[key].category,\n        });\n      }\n      setDeck(transformedDeck);\n    } catch (newError) {\n      setError(newError.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => fetchDeck(), [fetchDeck]);\n\n  const onDraw = {\n    setDisplay,\n    setSelectedCard,\n  };\n\n  let displayContent;\n  if (display === \"form\") {\n    displayContent = <AffirmationDeckForm onDraw={onDraw} deck={deck} />;\n  }\n  if (display === \"card\") {\n    displayContent = (\n      <>\n        <AffirmationDeckCard card={selectedCard} />\n      </>\n    );\n  }\n\n  let content;\n  useEffect(() => {\n    if (deck.length > 0) {\n      console.log(\"deck\");\n      content = displayContent;\n    }\n    if (error) {\n      console.log(error);\n      content = <p>{error}</p>;\n    }\n    if (isLoading) {\n      console.log(\"loading\");\n      content = <p>Loading...</p>;\n    }\n  }, [deck, error, isLoading]);\n\n  return (\n    <>\n      <h1>Virtual Affirmation Deck</h1>\n      {content}\n    </>\n  );\n};\n\nexport default AffirmationDeck;\n"]},"metadata":{},"sourceType":"module"}