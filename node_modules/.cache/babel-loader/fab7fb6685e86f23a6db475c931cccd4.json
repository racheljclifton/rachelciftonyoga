{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/Documents/rachelcliftonyoga/src/store/deck-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeckContext = /*#__PURE__*/React.createContext({\n  deck: [],\n  selectedCard: {}\n});\nexport default DeckContext;\nexport const DeckContextProvider = props => {\n  _s();\n\n  const [deck, setDeck] = useState([]);\n  const [selectedCard, setSelectedCard] = useState({});\n\n  const createDeckHandler = newDeck => {\n    setDeck(newDeck);\n  };\n\n  const filterDeckHandler = filterCategory => {\n    let newDeck;\n\n    setDeck = prevDeck => {\n      newDeck = prevDeck.map(card => card.category === filterCategory);\n    };\n\n    setDeck(newDeck);\n  };\n\n  function shuffleDeck(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  ;\n\n  const shuffleDeckHandler = numberOfShuffles => {\n    const shuffledDeck = deck.slice(0);\n\n    for (let i = 0; i < numberOfShuffles; i++) {\n      shuffleDeck(shuffledDeck);\n    }\n\n    setDeck(shuffledDeck);\n  };\n\n  const selectCardHandler = drawSelection => {\n    if (drawSelection === 'top') {\n      setSelectedCard(deck[0]);\n    } else if (drawSelection === 'bottom') {\n      setSelectedCard(deck[deck.length - 1]);\n    } else {\n      const random = Math.floor(Math.random() * deck.length);\n      setSelectedCard(deck[random]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(DeckContext.Provider, {\n    value: {\n      deck: deck,\n      selectedCard: selectedCard,\n      onCreate: createDeckHandler,\n      onFilter: filterDeckHandler,\n      onShuffle: shuffleDeckHandler,\n      onSelect: selectCardHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 7\n  }, this);\n};\n\n_s(DeckContextProvider, \"nGr6dC4WvtGWYh0Z5O07Apv2Bng=\");\n\n_c = DeckContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckContextProvider\");","map":{"version":3,"sources":["/Users/rachel/Documents/rachelcliftonyoga/src/store/deck-context.js"],"names":["React","useState","DeckContext","createContext","deck","selectedCard","DeckContextProvider","props","setDeck","setSelectedCard","createDeckHandler","newDeck","filterDeckHandler","filterCategory","prevDeck","map","card","category","shuffleDeck","array","i","length","j","Math","floor","random","shuffleDeckHandler","numberOfShuffles","shuffledDeck","slice","selectCardHandler","drawSelection","onCreate","onFilter","onShuffle","onSelect","children"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\n\nconst DeckContext = React.createContext({\n  deck: [],\n  selectedCard: {},\n});\n\nexport default DeckContext;\n\nexport const DeckContextProvider = (props) => {\n  const [deck, setDeck] = useState([]);\n  const [selectedCard, setSelectedCard] = useState({});\n\n  const createDeckHandler = (newDeck) => {\n    setDeck(newDeck);\n  };\n\n  const filterDeckHandler = (filterCategory) => {\n    let newDeck;\n    setDeck = (prevDeck) => {\n      newDeck = prevDeck.map((card) => card.category === filterCategory);\n    };\n    setDeck(newDeck);\n  };\n\n  function shuffleDeck(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  const shuffleDeckHandler = (numberOfShuffles) => {\n    const shuffledDeck = deck.slice(0);\n    for (let i = 0; i < numberOfShuffles; i++){\n        shuffleDeck(shuffledDeck);\n    }\n    setDeck(shuffledDeck);\n  }\n\n  const selectCardHandler = (drawSelection) => {\n      if (drawSelection === 'top'){\n        setSelectedCard(deck[0]);\n      } else if (drawSelection === 'bottom'){\n          setSelectedCard(deck[deck.length-1]);\n      } else {\n          const random = Math.floor(Math.random() * deck.length);\n          setSelectedCard(deck[random])\n      }\n  }\n\n  return (\n      <DeckContext.Provider\n          value = {\n          {deck: deck, \n          selectedCard: selectedCard, \n          onCreate: createDeckHandler,\n          onFilter: filterDeckHandler, \n          onShuffle: shuffleDeckHandler,\n          onSelect: selectCardHandler\n          }}>\n          {props.children}\n      </DeckContext.Provider>\n  )\n\n};\n"]},"metadata":{},"sourceType":"module"}